{
    "subscription_ids":[
    ],
    "query":"securityresources \n        | where type =~ \"microsoft.security/assessments\"\n        | extend assessmentType = (// AssessmentsQueryBuilder.columnDefinitions.assessmentType\n                iff(type == \"microsoft.security/assessments\", tostring(properties.metadata.assessmentType), dynamic(null)))\n        | where (// AssessmentsQueryBuilder.predicates.isOneQueueSupportedAssessment\n            (type == \"microsoft.security/assessments\" and (assessmentType in~ (\"BuiltIn\", \"CustomerManaged\"))))\n        | extend assessmentTypeSkimmed = (// AssessmentsQueryBuilder.columnDefinitions.recommendationType\n                iff(type == \"microsoft.security/assessments\", case(\n                    tostring(properties.metadata.assessmentType) == \"BuiltIn\", \"BuiltIn\",\n                    tostring(properties.metadata.assessmentType) == \"BuiltInPolicy\", \"BuiltIn\",\n                    tostring(properties.metadata.assessmentType) == \"CustomPolicy\", \"Custom\",\n                    tostring(properties.metadata.assessmentType) == \"CustomerManaged\", \"Custom\",\n                    tostring(properties.metadata.assessmentType) == \"ManualCustomPolicy\", \"Custom\",\n                    tostring(properties.metadata.assessmentType) == \"ManualBuiltInPolicy\", \"BuiltIn\",\n                    dynamic(null)\n                ), dynamic(null)))\n        | extend assessmentId = tolower(id)\n        | extend assessmentKey = (// AssessmentsQueryBuilder.columnDefinitions.assessmentKey\n                iff(type == \"microsoft.security/assessments\", name, dynamic(null)))\n        | extend source = (// AssessmentsQueryBuilder.columnDefinitions.source\n                iff(type == \"microsoft.security/assessments\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null)))\n        | extend statusCode = (// AssessmentsQueryBuilder.columnDefinitions.statusCode\n                iff(type == \"microsoft.security/assessments\", tostring(properties.status.code), dynamic(null)))\n        | extend resourceId = (// AssessmentsQueryBuilder.columnDefinitions.resourceId\n                iff(type == \"microsoft.security/assessments\", trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n            (// AssessmentsQueryBuilder.predicates.newAwsAssessmentIndicator\n            (type == \"microsoft.security/assessments\" and (source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), properties.resourceDetails.Id,\n            (// AssessmentsQueryBuilder.predicates.newGcpAssessmentIndicator\n            (type == \"microsoft.security/assessments\" and (source =~ \"gcp\" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), properties.resourceDetails.Id,\n            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n            extract(\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n            )))), dynamic(null)))\n        | extend resourceName = (// AssessmentsQueryBuilder.columnDefinitions.resourceName\n                iff(type == \"microsoft.security/assessments\", tostring(coalesce(properties.resourceDetails.ResourceName, properties.additionalData.CloudNativeResourceName, properties.additionalData.ResourceName, properties.additionalData.resourceName, split(resourceId, '/')[-1], extract(@\"(.+)/(.+)\", 2, resourceId))), dynamic(null)))\n        | extend resourceType = (// AssessmentsQueryBuilder.columnDefinitions.typeFullPath\n                iff(type == \"microsoft.security/assessments\", tolower(properties.resourceDetails.ResourceType), dynamic(null)))\n        | extend riskLevelText = (// AssessmentsQueryBuilder.columnDefinitions.riskLevelText\n                iff(type == \"microsoft.security/assessments\", tostring(properties.risk.level), dynamic(null)))\n        | extend riskLevel = (// AssessmentsQueryBuilder.columnDefinitions.riskLevel\n                iff(type == \"microsoft.security/assessments\", case(riskLevelText =~ \"Critical\", 4,\n                  riskLevelText =~ \"High\", 3,\n                  riskLevelText =~ \"Medium\", 2,\n                  riskLevelText =~ \"Low\", 1,\n                  0), dynamic(null)))\n        | extend riskFactors = (// AssessmentsQueryBuilder.columnDefinitions.riskFactors\n                iff(type == \"microsoft.security/assessments\", iff(isnull(properties.risk.riskFactors), dynamic([]), properties.risk.riskFactors), dynamic(null)))\n        | extend attackPaths = array_length((// AssessmentsQueryBuilder.columnDefinitions.attackPaths\n                iff(type == \"microsoft.security/assessments\", iff(isnull(properties.risk.attackPathsReferences), dynamic([]), properties.risk.attackPathsReferences), dynamic(null))))           \n        | extend displayName = (// AssessmentsQueryBuilder.columnDefinitions.displayName\n                iff(type == \"microsoft.security/assessments\", tostring(properties.displayName), dynamic(null)))\n        | extend statusCause = (// AssessmentsQueryBuilder.columnDefinitions.statusCause\n                iff(type == \"microsoft.security/assessments\", tostring(properties.status.cause), dynamic(null)))\n        | extend isExempt = (// AssessmentsQueryBuilder.columnDefinitions.isExempt\n                iff(type == \"microsoft.security/assessments\", iff(statusCause == \"Exempt\", tobool(1), tobool(0)), dynamic(null)))\n        | extend statusChangeDate = tostring((// AssessmentsQueryBuilder.columnDefinitions.statusChangeDate\n                iff(type == \"microsoft.security/assessments\", todatetime(properties.status.statusChangeDate), dynamic(null))))\n        | extend maturityLevel = (// AssessmentsQueryBuilder.columnDefinitions.maturityLevel\n                iff(type == \"microsoft.security/assessments\", case(\n                    isnull(properties.metadata.preview), \"GA\",\n                    tobool(properties.metadata.preview), \"Preview\",\n                    \"GA\"), dynamic(null)))\n        | project assessmentId,\n                    maturityLevel,\n                    statusChangeDate,\n                    isExempt,\n                    riskLevel,\n                    riskFactors,\n                    attackPaths,\n                    statusCode,\n                    displayName,\n                    resourceId,               \n                    assessmentKey,\n                    resourceType,\n                    resourceName,\n                    assessmentTypeSkimmed               \n            | join kind=leftouter (\n                securityresources\n                | where type == 'microsoft.security/assessments/governanceassignments'\n                | extend assignedResourceId = tolower((// GovernanceAssignmentsQueryBuilder.columnDefinitions.assignedResourceId\n                iff(type == \"microsoft.security/assessments/governanceassignments\", tostring(properties.assignedResourceId), dynamic(null))))\n                | extend dueDate = (// GovernanceAssignmentsQueryBuilder.columnDefinitions.remediationDueDate\n                iff(type == \"microsoft.security/assessments/governanceassignments\", todatetime(properties.remediationDueDate), dynamic(null)))\n                | extend owner = (// GovernanceAssignmentsQueryBuilder.columnDefinitions.owner\n                iff(type == \"microsoft.security/assessments/governanceassignments\", iff(isempty(tostring(properties.owner)), \"unspecified\", tostring(properties.owner)), dynamic(null)))\n                | extend governanceStatus = (// GovernanceAssignmentsQueryBuilder.columnDefinitions.completionStatus\n                iff(type == \"microsoft.security/assessments/governanceassignments\", case(\n                            isnull(todatetime(properties.remediationDueDate)), \"NoDueDate\",\n                            // We round up the current date time to be the start of the day, as the due date is inclusive\n                            todatetime(properties.remediationDueDate) >= bin(now(), 1d), \"OnTime\",\n                            \"Overdue\"\n                        ), dynamic(null)))\n                | project assignedResourceId, dueDate, owner, governanceStatus\n            ) on $left.assessmentId == $right.assignedResourceId\n            | extend completionStatusNumber = case(governanceStatus == \"Overdue\", 5,\n                                                       governanceStatus == \"OnTime\", 4,\n                                                       statusCode == \"Unhealthy\", 3, \n                                                       isExempt, 7,\n                                                       1)\n                | extend completionStatus = case(completionStatusNumber == 5, \"Overdue\",\n                                                 completionStatusNumber == 4, \"OnTime\",\n                                                 completionStatusNumber == 3, \"Unassigned\",\n                                                 completionStatusNumber == 7, \"Exempted\",\n                                                 \"Completed\")\n            | where completionStatus in~ (\"OnTime\",\"Overdue\",\"Unassigned\")\n            | project-away assignedResourceId, governanceStatus, isExempt\n                       | order by riskLevel desc, attackPaths desc, displayName",
    "export_file_path": "C:/assessments.csv"
}